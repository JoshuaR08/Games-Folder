import turtle
import math
import random

wn = turtle.Screen()
wn.setup(700, 700)
wn.bgcolor("black")
wn.tracer(0)
wn.title("The Dungeon Game")
class Pen(turtle.Turtle):
    def __init__(self):
        turtle.Turtle.__init__(self)
        self.shape("square")
        self.color("white")
        self.penup()
        self.speed(0)

class Player(turtle.Turtle):
    def __init__(self):
        turtle.Turtle.__init__(self)
        self.shape("square")
        self.color("blue")
        self.penup()
        self.gold = 0
        self.speed(0)
        self.treasureCount = 0

    def go_up(self):
        move_to_x = player.xcor()
        move_to_y = player.ycor() + 24
        if(move_to_x, move_to_y) not in walls:
            self.goto(move_to_x, move_to_y)
    def go_down(self):
        move_to_x = player.xcor()
        move_to_y = player.ycor() - 24
        if (move_to_x, move_to_y) not in walls:
            self.goto(move_to_x, move_to_y)
    def go_left(self):
        move_to_x = player.xcor() - 24
        move_to_y = player.ycor()
        self.goto(move_to_x, move_to_y)
    def go_right(self):
        move_to_x = player.xcor() + 24
        move_to_y = player.ycor()
        if (move_to_x, move_to_y) not in walls:
            self.goto(move_to_x, move_to_y)
    def is_collision(self,other):
        a = self.xcor()-other.xcor()
        b = self.ycor()-other.ycor()
        distance = math.sqrt((a ** 2) + (b ** 2) )

        if distance < 5:
            return True
        else:
            return False

class Treasure(turtle.Turtle):
    def __init__(self,x,y):
        turtle.Turtle.__init__(self)
        self.shape("circle")
        self.color("gold")
        self.penup()
        self.speed(0)
        self.gold = 100
        self.goto(x,y)
    def destroy(self):
        self.goto(2000,2000)
        self.hideturtle()

class Enemy(turtle.Turtle):
    def __init__(self,x,y):
        turtle.Turtle.__init__(self)
        self.shape("triangle")
        self.color("red")
        self.penup()
        self.speed(0)
        self.gold = 25
        self.goto(x,y)
        self.direction = random.choice(["up", "down", "left","right"])
    def move(self):
        if self.direction == 'up':
            dx = 0
            dy = 24
        elif self.direction == "down":
            dx = 0
            dy = -24
        elif self.direction == 'left':
            dx = -24
            dy = 0
        elif self.direction == 'right':
            dx = 24
            dy = 0
        else:
            dx = 0

        if self.is_close(player):
            if player.xcor() < self.xcor():
                self.direction = "left"
            elif player.xcor() > self.xcor():
                self.direction = "right"
            elif player.ycor() < self.ycor():
                self.direction = "down"
            elif player.ycor() > self.ycor():
                self.direction = 'up'


        move_to_x = self.xcor() + dx
        move_to_y = self.ycor() + dy

        if (move_to_x,move_to_y) not in walls:
            self.goto(move_to_x, move_to_y)
        else:
            self.direction = random.choice(["up", 'down', 'left', 'right'])


        turtle.ontimer(self.move, t=random.randint(100,300))

    def destroy(self):
        self.goto(2000,2000)
        self.hideturtle()

    def is_close(self,other):
        a = self.xcor()-other.xcor()
        b = self.ycor()-other.ycor()
        distance = math.sqrt((a ** 2))

        if distance < 75:
            return True
        else:
            return False




# create Levels list
levels = [""]
treasures = []
enemies = []
# define first level
level_1 = [
    "XXXXXXXXXXXXXXXXXXXXXXXXX",
    "XP  XXXXXXX      E      XX",
    "X  XXXXXXX  XXXXXX  XX XX",
    "X       XX  XXXXXX  X XXX",
    "X       XX  XXX        XX",
    "XXXXXX  XX  XXX E       XX",
    "XXXXXX  XX  XXXXXXT  XXXXX",
    "XXXXXX  XX    XXXX  XXXXX",
    "X  XXX        XXXX  XXXXX",
    "X  XXX  XXXXXXXXXXXXXXXXX",
    "X         XXXXXXXXXXXXXXX",
    "X                XXXXXXXX",
    "XXXXXXXXXXXX     XXXXX  X",
    "XXXXXXXXXXXXXXX  XXXXX  X",
    "XXX  XXXXXXXXXX         X",
    "XXX         E           X",
    "XXX         TXXXXXXXXXXXX",
    "XXXXXXXXXX  XXXXXXXXXXXXX",
    "XXXXXXXXXX              X",
    "XX   XXXX      E        X",
    "XX   XXXXXXXXXXXXX  XXXXX",
    "XX    YXXXXXXXXXXX  XXXXX",
    "XX          XXXX        X",
    "XXXX                    X",
    "XXXXXXXXXXXXXXXXXXXXXXXXX"
]

# Add maze to mazes list
levels.append(level_1)


# Create Level Setup Function

def setup_maze(level):
    for y in range(len(level)):
        for x in range(len(level[y])):
            # Get the Character at each x,y coordinate
            # NOTE the order of the y and x in the next line
            character = level[y][x]
            # Calculate the screen x, y coordinates
            screen_x = -288 + (x * 24)
            screen_y = 288 - (y * 24)
            # Check if it is an X (representing a wall)
            if character == "X":
                pen.goto(screen_x, screen_y)
                pen.stamp()
                walls.append((screen_x, screen_y))

            if character == "P":
                player.goto(screen_x, screen_y)

            if character == "T":
                treasures.append(Treasure(screen_x, screen_y))
            if character == "E":
                enemies.append(Enemy(screen_x,screen_y))

#Walls
walls = []


# Create class instances
pen = Pen()
player = Player()

#Set up the level
setup_maze(levels[1])
print(walls)
#Keyboard Binding
turtle.listen()
turtle.onkeypress(player.go_left, "Left")
turtle.onkeypress(player.go_right, "Right")
turtle.onkeypress(player.go_up, "Up")
turtle.onkeypress(player.go_down, "Down")

#Turn off the screen updates
for enemy in enemies:
    turtle.ontimer(enemy.move,t=250)

# Main Game Loop
while True:
    for treasure in treasures:
        if player.is_collision(treasure):
            player.gold += treasure.gold
            print("Player Gold: {}".format(player.gold))
            #Destroy the treasure
            treasure.destroy()
            treasures.remove(treasure)
            player.treasureCount += 1
    for enemy in enemies:
        if player.is_collision(enemy):
            print("Player dies!")
            exit()
            break
    if player.treasureCount >= 2:
        print('You win')
        exit()
    # Update Screen
    wn.update()
