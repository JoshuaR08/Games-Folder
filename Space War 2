
import random
import turtle
import time

turtle.fd(0)
turtle.speed(0)
turtle.bgcolor("black")
turtle.ht()
turtle.setundobuffer(1)
turtle.tracer(0)


class Sprite(turtle.Turtle):
    def __init__(self, spriteshape, color, startx, starty):
        turtle.Turtle.__init__(self, shape=spriteshape)
        self.speed(0)
        self.penup()
        self.color(color)
        self.fd(0)
        self.goto(startx, starty)
        self.speed = 1

    def move(self):
        self.fd(self.speed)
        # boundary detection
        if self.xcor() > 290:
            self.setx(290)
            self.rt(60)
        if self.xcor() < -290:
            self.setx(-290)
            self.rt(60)
        if self.ycor() > 290:
            self.sety(290)
            self.rt(60)
        if self.ycor() < -290:
            self.sety(-290)
            self.rt(60)

    def is_collision(self, other):
        if (self.xcor() >= (other.xcor() - 20)) and \
        self.xcor() <= other.xcor() + 20 and \
        self.ycor() >= other.ycor() - 20 and \
        self.ycor() <= other.ycor() + 20:
            return True
        else:
            return False




class Player(Sprite):
    def __init__(self, spriteshape, color, startx, starty):
        Sprite.__init__(self, spriteshape=spriteshape, color=color, startx=startx, starty=starty)
        self.speed = 4
        self.lives = 3


    def turn_left(self):
        self.lt(45)

    def turn_right(self):
        self.rt(45)

    def accelerate(self):
        self.speed += 1

    def deaccelerate(self):
        self.speed -= 1


class Enemy(Sprite):
    def __init__(self, spriteshape, color, startx, starty):
        Sprite.__init__(self, spriteshape=spriteshape, color=color, startx=startx, starty=starty)
        self.speed = 6
        self.setheading(random.randint(0, 360))

class Ally(Sprite):
    def __init__(self, spriteshape, color, startx, starty):
        Sprite.__init__(self, spriteshape=spriteshape, color=color, startx=startx, starty=starty)
        self.speed = 6
        self.setheading(random.randint(0, 360))
    def move(self):
        self.fd(self.speed)
        # boundary detection
        if self.xcor() > 290:
            self.setx(290)
            self.lt(60)
        if self.xcor() < -290:
            self.setx(-290)
            self.lt(60)
        if self.ycor() > 290:
            self.sety(290)
            self.lt(60)
        if self.ycor() < -290:
            self.sety(-290)
            self.lt(60)


class Game():
    def __init__(self):
        self.level = 1
        self.score = 0
        self.state = "playing"
        self.pen = turtle.Turtle()
        self.lives = 3

    def draw_border(self):
        self.pen.speed(0)
        self.pen.color("white")
        self.pen.pensize(3)
        self.pen.penup()
        self.pen.goto(-300, 300)
        self.pen.pendown()
        for side in range(4):
            self.pen.fd(600)
            self.pen.rt(90)
        self.pen.penup()
        self.pen.ht()
        self.pen.pendown()
    def show_status(self):
        self.pen.undo()
        msg = "Score: %s" %(self.score)
        self.pen.penup()
        self.pen.goto(300,310)
        self.pen.write(msg, font=("Arial",16,'normal'))



class Missle(Sprite):
    def __init__(self, spriteshape,color,startx,starty):
        Sprite.__init__(self,spriteshape,color,startx,starty)
        self.shapesize(stretch_wid=0.3, stretch_len=0.4, outline=None)
        self.speed = 20
        self.status = "ready"
        self.goto(-1000,1000)
    def fire(self):
        if self.status == "ready":
            self.goto(player.xcor(), player.ycor())
            self.setheading(player.heading())
            self.status = "firing"

    def move(self):
        if self.status == "ready":
            self.goto(-1000,1000)



        if self.status == "firing":
            self.fd(self.speed)
        #Border check
        if self.xcor() < -290 or self.xcor() > 290 or self.ycor() < -290 or self.ycor() > 290:
            self.goto(-1000,1000)
            self.status = "ready"



# Create game object
game = Game()
game.draw_border()
game.show_status()
# Create sprites
player = Player("triangle", "white", 0, 0)
#enemy = Enemy("circle", "red", -100, 0)
missle = Missle("triangle", "yellow", 0, 0)
#ally = Ally("square", "blue", 0,0)
enemies = []
allies = []
for i in range(6):
    enemies.append(Enemy("circle",'red', -100,0))

for i in range(6):
    allies.append(Ally("square", "blue", 100,0))

# Keyboard bindings
turtle.listen()
turtle.onkeypress(player.turn_left, "Left")
turtle.onkeypress(player.turn_right, "Right")
turtle.onkeypress(player.accelerate, "Up")
turtle.onkeypress(player.deaccelerate, "Down")
turtle.onkeypress(missle.fire, "space")

# Main game loop
while True:
    turtle.update()
    time.sleep(0.03)
    player.move()
    #enemy.move()
    missle.move()
    #ally.move()

    for enemy in enemies:
        # Check for collision between player and enemy
        if player.is_collision(enemy):
            x = random.randint(-250, 250)
            y = random.randint(-250, 250)
            enemy.goto(x, y)
            game.show_status()
            player.hideturtle()
            break
        if missle.is_collision(enemy):
            x = random.randint(-250, 250)
            y = random.randint(-250, 250)
            enemy.goto(x, y)
            missle.status = "ready"
            # Add to the score
            game.score += 100
            game.show_status()

        enemy.move()
    for ally in allies:
        # Check for collsion between the ally and missle
        if missle.is_collision(ally):
            x = random.randint(-250, 250)
            y = random.randint(-250, 250)
            ally.goto(x, y)
            missle.status = "ready"
            # Subtract from the score
            game.score -= 50
            game.show_status()
        ally.move()





turtle.mainloop()
